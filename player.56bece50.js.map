{"version":3,"sources":["../../modules/speedruncom/constants/celeste.ts","../../modules/speedruncom/wrapper.ts","../../modules/speedruncom/get-data.ts","../../modules/speedruncom/grid-transformation.ts","../../modules/rankings/models/Player.ts","../../modules/rankings/scoring.ts","../../modules/rankings/build-map.ts","../../modules/rankings/get-map.ts","../ui/util/html-helper.ts","../models/TableSelection.ts","../ui/util/time-helper.ts","../ui/components/subtexts.ts","../ui/components/player-table.ts","../ui/components/total-points-count.ts","../ui/components/player-page.ts","../ui/components/loader.ts","player.ts"],"names":[],"mappings":"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","file":"player.56bece50.js","sourceRoot":"..\\src\\app\\pages","sourcesContent":["/* eslint-disable no-unused-vars */\r\nimport SpeedrunId from '../models/SpeedrunId'\r\n\r\nconst GAME_ID: SpeedrunId = 'o1y9j9v6'\r\nconst GAME_NAME = 'Celeste'\r\n\r\nconst COLLECTIBLES_VARIABLE_NAME = 'Full Clear / ARB / HC'\r\nconst FC_RUN_VALUE = 'Full Clear'\r\nconst ARB_RUN_VALUE = 'All Red Berries'\r\n\r\nconst CORE_FC_VARIABLE_NAME = 'Full Clear'\r\nconst CORE_FC_RUN_VALUE = 'Yes'\r\n\r\nenum Categories {\r\n  A_SIDES = 'Clear',\r\n  COLLECTIBLES = 'Collectibles',\r\n  B_SIDES = 'B-Side',\r\n  C_SIDES = 'C-Side',\r\n}\r\n\r\nenum ChapterNames {\r\n  C1 = 'Forsaken City',\r\n  C2 = 'Old Site',\r\n  C3 = 'Celestial Resort',\r\n  C4 = 'Golden Ridge',\r\n  C5 = 'Mirror Temple',\r\n  C6 = 'Reflection',\r\n  C7 = 'The Summit',\r\n  C8 = 'Core',\r\n  C9 = 'Farewell',\r\n}\r\n\r\nexport {\r\n  GAME_ID,\r\n  GAME_NAME,\r\n  COLLECTIBLES_VARIABLE_NAME,\r\n  FC_RUN_VALUE,\r\n  ARB_RUN_VALUE,\r\n  CORE_FC_VARIABLE_NAME,\r\n  CORE_FC_RUN_VALUE,\r\n  Categories,\r\n  ChapterNames\r\n}\r\n","import { GAME_ID } from './constants/celeste'\r\nimport VariableValueIdPair from './models/VariableValueIdPair'\r\nimport SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunId from './models/SpeedrunId'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunUser from './models/SpeedrunUser'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\nconst HREF = 'www.speedrun.com'\r\nconst API_VERSION = 'v1'\r\n\r\nconst getBasePath = () => {\r\n  return `https://${HREF}/api/${API_VERSION}`\r\n}\r\n\r\nconst fetchLevelBoard = async (\r\n  level: SpeedrunLevel,\r\n  category: SpeedrunCategory\r\n): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  return (\r\n    await fetch(\r\n      `${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${\r\n        category.id\r\n      }`\r\n    )\r\n  ).json()\r\n}\r\n\r\nconst fetchLevelBoardWithVariables = async (\r\n  level: SpeedrunLevel,\r\n  category: SpeedrunCategory,\r\n  variables: VariableValueIdPair[]\r\n): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  const variableString = variables\r\n    .map((x) => `var-${x.variableId}=${x.valueId}`)\r\n    .join('&')\r\n  return (\r\n    await fetch(\r\n      `${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${\r\n        category.id\r\n      }?${variableString}`\r\n    )\r\n  ).json()\r\n}\r\n\r\nconst fetchLevels = async (): Promise<SpeedrunApiResponse<SpeedrunLevel[]>> => {\r\n  return await (await fetch(`${getBasePath()}/games/${GAME_ID}/levels`)).json()\r\n}\r\n\r\nconst fetchLevelCategories = async (\r\n  level: SpeedrunLevel\r\n): Promise<SpeedrunApiResponse<SpeedrunCategory[]>> => {\r\n  return await (\r\n    await fetch(`${getBasePath()}/levels/${level.id}/categories`)\r\n  ).json()\r\n}\r\n\r\nconst fetchLevelVariables = async (\r\n  level: SpeedrunLevel\r\n): Promise<SpeedrunApiResponse<SpeedrunVariable[]>> => {\r\n  return await (\r\n    await fetch(`${getBasePath()}/levels/${level.id}/variables`)\r\n  ).json()\r\n}\r\n\r\nconst fetchUser = async (\r\n  user: SpeedrunId\r\n): Promise<SpeedrunApiResponse<SpeedrunUser>> => {\r\n  return await (await fetch(`${getBasePath()}/users/${user}`)).json()\r\n}\r\n\r\nexport {\r\n  fetchLevelBoard,\r\n  fetchLevelBoardWithVariables,\r\n  fetchLevels,\r\n  fetchLevelCategories,\r\n  fetchLevelVariables,\r\n  fetchUser\r\n}\r\n","import SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport {\r\n  fetchLevelCategories,\r\n  fetchLevelBoard,\r\n  fetchLevels,\r\n  fetchLevelVariables,\r\n  fetchLevelBoardWithVariables\r\n} from './wrapper'\r\nimport {\r\n  ARB_RUN_VALUE,\r\n  Categories,\r\n  ChapterNames,\r\n  COLLECTIBLES_VARIABLE_NAME,\r\n  CORE_FC_RUN_VALUE,\r\n  CORE_FC_VARIABLE_NAME,\r\n  FC_RUN_VALUE\r\n} from './constants/celeste'\r\nimport VariableValueIdPair from './models/VariableValueIdPair'\r\n\r\ninterface RawDataCollection {\r\n  categories: SpeedrunApiResponse<SpeedrunCategory[]>;\r\n  levels: SpeedrunApiResponse<SpeedrunLevel[]>;\r\n  grid: SpeedrunApiResponse<SpeedrunLeaderboard>[][];\r\n  variables: SpeedrunApiResponse<SpeedrunVariable[]>[];\r\n}\r\n\r\nconst getRawLeaderboardData = async (): Promise<RawDataCollection> => {\r\n  const levels = await fetchLevels()\r\n  const categories = await fetchLevelCategories(levels.data[0])\r\n  const variables = await Promise.all(\r\n    levels.data.map((lvl) => fetchLevelVariables(lvl))\r\n  )\r\n  const grid = await Promise.all(\r\n    categories.data.map((cat) => {\r\n      return Promise.all(\r\n        levels.data.map((lvl, i) => {\r\n          if (cat.name === Categories.COLLECTIBLES) {\r\n            if (lvl.name === ChapterNames.C9) return fetchLevelBoard(lvl, cat)\r\n\r\n            const catVars = variables[i]\r\n            const queryVars: VariableValueIdPair[] = []\r\n\r\n            const findVariable = (\r\n              varName: string,\r\n              valLabel: string\r\n            ): VariableValueIdPair => {\r\n              // find the 2 relevant IDs based on variable name and run value label\r\n              const variable = catVars.data.find((x) => x.name === varName)\r\n              const value = Object.entries(variable!.values.values).find(\r\n                ([_, val]) => val.label === valLabel\r\n              )\r\n\r\n              return {\r\n                variableId: variable!.id,\r\n                valueId: value![0]\r\n              }\r\n            }\r\n\r\n            // Core has a very different FC leaderboard structure, with ARB as category label and a FC run var\r\n            const isCore = lvl.name === ChapterNames.C8\r\n            queryVars.push(\r\n              findVariable(\r\n                COLLECTIBLES_VARIABLE_NAME,\r\n                isCore ? ARB_RUN_VALUE : FC_RUN_VALUE\r\n              )\r\n            )\r\n            if (isCore) {\r\n              queryVars.push(\r\n                findVariable(CORE_FC_VARIABLE_NAME, CORE_FC_RUN_VALUE)\r\n              )\r\n            }\r\n\r\n            return fetchLevelBoardWithVariables(lvl, cat, queryVars)\r\n          }\r\n          return fetchLevelBoard(lvl, cat)\r\n        })\r\n      )\r\n    })\r\n  )\r\n\r\n  return {\r\n    categories,\r\n    levels,\r\n    grid,\r\n    variables\r\n  }\r\n}\r\n\r\nexport { getRawLeaderboardData }\r\n","import LevelGrid from './models/LevelGrid'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\n\r\n/** function that transforms a LevelGrid in some way */\r\ntype gridTransformationFunction = (grid: LevelGrid) => LevelGrid;\r\n\r\n/** returns a gridTransformationFunction, using the given callback function in grid.map */\r\nconst getGridMapTransformation = (func: (levelColumn: SpeedrunLeaderboard[], i: number) => SpeedrunLeaderboard[]): gridTransformationFunction => {\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return grid.map((levelColumn, i) => func(levelColumn, i))\r\n  }\r\n}\r\n\r\nconst removeColumn = (grid: LevelGrid, col: number): LevelGrid => {\r\n  return grid.filter((_, i) => i !== col)\r\n}\r\n\r\nconst removeFarewellObsoletes = (grid: LevelGrid): LevelGrid => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 0) {\r\n      return levelColumn\r\n    }\r\n    return levelColumn.filter((_, i) => i !== 8)\r\n  }\r\n\r\n  return getGridMapTransformation(callback)(grid)\r\n}\r\n\r\nexport { gridTransformationFunction, getGridMapTransformation, removeColumn, removeFarewellObsoletes }\r\n","import SpeedrunId from '../../speedruncom/models/SpeedrunId'\r\nimport SpeedrunRankedRun from '../../speedruncom/models/SpeedrunRankedRun'\r\nimport RankingGrid from './RankingGrid'\r\nimport { fetchUser } from '../../speedruncom/wrapper'\r\nimport RankedRunWithScore from './RankedRunWithScore'\r\n\r\nexport type AverageScore = [\r\n  number, // count\r\n  number, // mean\r\n  number // confidence bound\r\n];\r\n\r\nfunction GetAverageStatistics (scores: number[]): AverageScore {\r\n  const count = scores.length\r\n  if (count === 0) return [0, 0, 0]\r\n  const sum = scores.reduce((a, b) => a + b, 0)\r\n  if (count === 1) return [1, sum, sum]\r\n  const ssum = scores.reduce((a, b) => a + b * b, 0)\r\n  const avg = sum / count\r\n  const tdev = ssum - avg * avg * count\r\n  const sdev = Math.sqrt(tdev / (count - 1))\r\n  const cbound = 2 * sdev / Math.sqrt(count)\r\n  return [count, avg, cbound]\r\n}\r\n\r\nexport default class Player {\r\n  id: SpeedrunId\r\n  timesPage: RankingGrid\r\n\r\n  private _pointsPerColumn: number[]\r\n  private _avgScorePerColumn: (AverageScore | null)[]\r\n  private _totalAvgScore: (AverageScore | null) = null\r\n  private _name: string | null | undefined = undefined\r\n\r\n  constructor (id: SpeedrunId, gridDimensions: number[]) {\r\n    this.id = id\r\n    this.timesPage = gridDimensions.map((colSize) => new Array<RankedRunWithScore | null>(colSize).fill(null))\r\n    this._pointsPerColumn = gridDimensions.map((_) => 0)\r\n    this._avgScorePerColumn = gridDimensions.map((_) => null)\r\n  }\r\n\r\n  /** register run r in the grid at position i, j */\r\n  registerRun (r: SpeedrunRankedRun, s: number, i: number, j: number) {\r\n    const x = {\r\n      place: r.place,\r\n      run: r.run,\r\n      score: s\r\n    }\r\n    this.timesPage[i][j] = x\r\n  }\r\n\r\n  public getPointsOfColumn (col: number): number {\r\n    if (this._pointsPerColumn[col]) {\r\n      return this._pointsPerColumn[col]\r\n    }\r\n\r\n    const val = this.timesPage[col].filter((x) => x != null).reduce((sum, r) => sum + r!.score, 0)\r\n    this._pointsPerColumn[col] = val\r\n\r\n    return val\r\n  }\r\n\r\n  public getAvgScoreOfColumn (col: number): AverageScore {\r\n    if (this._avgScorePerColumn[col] === null) {\r\n      const list = this.timesPage[col].filter((x) => x != null).map((r) => r!.score)\r\n      this._avgScorePerColumn[col] = GetAverageStatistics(list)\r\n    }\r\n    return this._avgScorePerColumn[col]!\r\n  }\r\n\r\n  public getAvgScore (): AverageScore {\r\n    if (this._totalAvgScore === null) {\r\n      const list = this.timesPage.map((r) => r.filter((x) => x != null).map((x) => x!.score)).reduce((a, b) => a.concat(b), [])\r\n      this._totalAvgScore = GetAverageStatistics(list)\r\n    }\r\n    return this._totalAvgScore!\r\n  }\r\n\r\n  public get totalPoints () {\r\n    return this._pointsPerColumn.reduce((sum, _, i) => sum + this.getPointsOfColumn(i), 0)\r\n  }\r\n\r\n  /**\r\n   * this getter should be used with caution, preferably when absolutely certain that the name of\r\n   * a player is already loaded\r\n   *\r\n   * otherwise use the async version getName\r\n   */\r\n  public get name () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    fetchUser(this.id).then(val => {\r\n      const n = val.data.names.international\r\n      this._name = n\r\n\r\n      return n\r\n    })\r\n\r\n    return ''\r\n  }\r\n\r\n  public async getName () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    try {\r\n      const n = await (await fetchUser(this.id)).data.names.international\r\n      this._name = n\r\n    } catch {\r\n      this._name = `UNLOADED: ${this.id}`\r\n    }\r\n\r\n    return this._name\r\n  }\r\n}\r\n","import SpeedrunRankedRun from '../speedruncom/models/SpeedrunRankedRun'\r\n\r\ntype scoringFunction = (r: SpeedrunRankedRun) => number\r\n\r\nconst eliteScoring = (run: SpeedrunRankedRun): number => {\r\n  if (run.place === 1) { return 100 }\r\n  if (run.place === 2) { return 97 }\r\n  return Math.max(0, 98 - run.place)\r\n}\r\n\r\nconst getPercentScoreFn = (wrTime: number) => {\r\n  return (r: SpeedrunRankedRun) => {\r\n    const t = r.run.times.primary_t\r\n\r\n    return Math.max(0, Math.round((1 - Math.log((Math.E - 1) * (t / wrTime - 1) + 1)) * 1000))\r\n  }\r\n}\r\n\r\nexport { scoringFunction, eliteScoring, getPercentScoreFn }\r\n","import LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport SpeedrunId from '../speedruncom/models/SpeedrunId'\r\nimport Player from './models/Player'\r\nimport { getPercentScoreFn } from './scoring'\r\n\r\nconst buildPlayerMap = async (grid: LevelGrid): Promise<Map<SpeedrunId, Player>> => {\r\n  const pMap = new Map<SpeedrunId, Player>()\r\n  const gridDimensions = grid.map((col) => col.length)\r\n\r\n  grid.forEach((levelColumn, i) =>\r\n    levelColumn.forEach((board, j) => {\r\n      const fn = getPercentScoreFn(board.runs[0].run.times.primary_t)\r\n\r\n      board.runs.forEach((r) => {\r\n        const p = r.run.players[0]\r\n\r\n        // skip players without id (deleted users)\r\n        if (p.id) {\r\n          pMap.has(p.id) || pMap.set(p.id, new Player(p.id, gridDimensions))\r\n          const pl = pMap.get(p.id)!\r\n          pl.registerRun(r, fn(r), i, j)\r\n        }\r\n      })\r\n    })\r\n  )\r\n\r\n  return pMap\r\n}\r\n\r\nexport default buildPlayerMap\r\n","import { getRawLeaderboardData } from '../speedruncom/get-data'\r\nimport { gridTransformationFunction, removeFarewellObsoletes } from '../speedruncom/grid-transformation'\r\nimport LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport buildPlayerMap from './build-map'\r\n\r\nconst getPlayerMap = async () => {\r\n  // fetch data\r\n  const raw = await getRawLeaderboardData()\r\n  let grid: LevelGrid = raw.grid.map((categoryRow) => categoryRow.map((levelBoard) => levelBoard.data))\r\n\r\n  // transform grid\r\n  const transformations: gridTransformationFunction[] = [\r\n    removeFarewellObsoletes\r\n  ]\r\n  transformations.forEach((tFunc) => { grid = tFunc(grid) })\r\n\r\n  // build and return player map\r\n  return await buildPlayerMap(grid)\r\n}\r\n\r\nexport default getPlayerMap\r\n","const htmlToElement = (html: string): Node => {\r\n  const template = document.createElement('template')\r\n  html = html.trim()\r\n  template.innerHTML = html\r\n  return template.content.firstChild as Node\r\n}\r\n\r\nexport default htmlToElement\r\n","/* eslint-disable no-unused-vars */\r\nenum TableSelection {\r\n    TOTAL = 'Total',\r\n    A_SIDES = 'A-Sides',\r\n    COLLECTIBLES = 'Collectibles',\r\n    B_SIDES = 'B-Sides',\r\n    C_SIDES = 'C-Sides',\r\n}\r\n\r\nexport default TableSelection\r\n","const removeLeadingZeroes = (s: string) => {\r\n  const arr = s.split('')\r\n  const out = s.split('')\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    const char = arr[i]\r\n    if (char === '0' || char === ':') {\r\n      out.shift()\r\n    } else {\r\n      return out.join('')\r\n    }\r\n  }\r\n\r\n  return s\r\n}\r\n\r\nconst toHHMMSS = (time: string) => {\r\n  const secNum = parseInt(time, 10)\r\n\r\n  const hours = Math.floor(secNum / 3600)\r\n  const minutes = Math.floor((secNum - (hours * 3600)) / 60)\r\n  const seconds = secNum - (hours * 3600) - (minutes * 60)\r\n\r\n  const raw = [hours, minutes, seconds].map(e => String(e).padStart(2, '0')).join(':')\r\n\r\n  return removeLeadingZeroes(raw)\r\n}\r\n\r\nexport { toHHMMSS, removeLeadingZeroes }\r\n","const getMiniText = (content: string) => {\r\n  const x = document.createElement('span')\r\n  x.classList.add('mini-text')\r\n  x.innerHTML = content\r\n  return x\r\n}\r\n\r\nconst getMiniTextString = (content: string) => {\r\n  const x = document.createElement('span')\r\n  x.classList.add('mini-text')\r\n  x.innerHTML = content\r\n  return `<span class=\"mini-text\">${content}</span>`\r\n}\r\n\r\nconst getPts = (asString: boolean = false) => {\r\n  return asString ? getMiniTextString('pts') : getMiniText('pts')\r\n}\r\n\r\nconst getMs = (ms: string, asString: boolean = false) => {\r\n  return asString ? getMiniTextString(ms) : getMiniText(ms)\r\n}\r\n\r\nconst getOrdinal = (n: number, asString: boolean = false) => {\r\n  // taken from https://stackoverflow.com/a/39466341\r\n  const nth = (x: number) => { return ['st', 'nd', 'rd'][((x + 90) % 100 - 10) % 10 - 1] || 'th' }\r\n  const ordinal = nth(n)\r\n\r\n  return asString ? getMiniTextString(ordinal) : getMiniText(ordinal)\r\n}\r\n\r\nexport { getMiniText, getPts, getMs, getOrdinal }\r\n","import RankedRunWithScore from '../../../modules/rankings/models/RankedRunWithScore'\r\nimport { ChapterNames } from '../../../modules/speedruncom/constants/celeste'\r\nimport TableSelection from '../../models/TableSelection'\r\nimport PlayerState from '../../states/PlayerState'\r\nimport htmlToElement from '../util/html-helper'\r\nimport { toHHMMSS } from '../util/time-helper'\r\nimport { getMs, getOrdinal, getPts } from './subtexts'\r\n\r\nconst getRunElement = (\r\n  r: RankedRunWithScore\r\n) => {\r\n  const getTd = (row1: string, row2: string) => {\r\n    return htmlToElement(`\r\n      <td class=\"hover-highlight\">\r\n        <div class=\"player-table-run\">\r\n          ${row1}\r\n          ${row2}\r\n        </div>\r\n      </td>\r\n    `)\r\n  }\r\n\r\n  if (!r) {\r\n    return getTd(\r\n      '<span>---------</span>',\r\n      '<span>---------</span>'\r\n    )\r\n  }\r\n\r\n  const timeSplit = String(r.run.times.primary_t).split('.')\r\n  const withoutMs = timeSplit[0]\r\n  const onlyMs = timeSplit.length === 2 ? timeSplit[1].padEnd(3, '0') : '000'\r\n\r\n  const ele = getTd(\r\n    `<span>${toHHMMSS(withoutMs)}.${getMs(onlyMs.substring(0, 3), true)}</span>`,\r\n    `<div><span>${r.place}${getOrdinal(r.place, true)}</span> / <span>${r.score} ${getPts(true)}</span></div>`\r\n  )\r\n\r\n  ele.addEventListener('click', () => {\r\n    window.open(r.run.weblink)\r\n  })\r\n\r\n  return ele\r\n}\r\n\r\nconst getTableElement = (elements: HTMLElement[]) => {\r\n  const ele = document.createElement('tr')\r\n  elements.forEach(e => ele.appendChild(e))\r\n  return ele\r\n}\r\n\r\nconst getTableHeader = (str: string[]) => {\r\n  const x = str.map(e => `<th>${e}</th>`).join('')\r\n  return htmlToElement(`<tr>${x}</tr>`)\r\n}\r\n\r\nconst getPlayerTable = (s: PlayerState) => {\r\n  const p = s.player!\r\n\r\n  const CHAPTERS = [\r\n    ChapterNames.C1,\r\n    ChapterNames.C2,\r\n    ChapterNames.C3,\r\n    ChapterNames.C4,\r\n    ChapterNames.C5,\r\n    ChapterNames.C6,\r\n    ChapterNames.C7,\r\n    ChapterNames.C8,\r\n    ChapterNames.C9\r\n  ]\r\n\r\n  const t = document.createElement('table')\r\n  t.classList.add('player-table')\r\n\r\n  // header\r\n  const head = getTableHeader([\r\n    'Stage',\r\n    TableSelection.A_SIDES,\r\n    TableSelection.COLLECTIBLES,\r\n    TableSelection.B_SIDES,\r\n    TableSelection.C_SIDES\r\n  ]) as HTMLElement\r\n  t.appendChild(head)\r\n\r\n  // main content\r\n  const tableRows = CHAPTERS.map((chapter, i) => {\r\n    let runElements\r\n\r\n    if (chapter === ChapterNames.C9) {\r\n      runElements = [\r\n        p!.timesPage[0][i]\r\n      ].map(r => getRunElement(r))\r\n    } else {\r\n      runElements = [\r\n        p!.timesPage[0][i],\r\n        p!.timesPage[1][i],\r\n        p!.timesPage[2][i],\r\n        p!.timesPage[3][i]\r\n      ].map(r => getRunElement(r))\r\n    }\r\n\r\n    const chapterElements = [htmlToElement(`<td class=\"bold player-table-chapter\">${chapter}</td>`)].concat(runElements)\r\n    return getTableElement(chapterElements.map(e => e as HTMLElement))\r\n  })\r\n  tableRows.forEach(e => t.appendChild(e))\r\n\r\n  // footer\r\n  const pointsPerCol = getTableHeader(\r\n    ['Totals'].concat([\r\n      p!.getPointsOfColumn(0),\r\n      p!.getPointsOfColumn(1),\r\n      p!.getPointsOfColumn(2),\r\n      p!.getPointsOfColumn(3)\r\n    ].map(e => `${String(e)} points`))) as HTMLElement\r\n  t.appendChild(pointsPerCol)\r\n\r\n  return t\r\n}\r\n\r\nexport default getPlayerTable\r\n","import PlayerState from '../../states/PlayerState'\r\n\r\nconst getTotalPointsCount = (s: PlayerState) => {\r\n  const x = document.createElement('span')\r\n  x.classList.add('center')\r\n  x.classList.add('total-points')\r\n  x.innerHTML = `Total: ${s.player!.totalPoints} points`\r\n  return x\r\n}\r\n\r\nexport default getTotalPointsCount\r\n","import PlayerState from '../../states/PlayerState'\r\nimport htmlToElement from '../util/html-helper'\r\nimport getPlayerTable from './player-table'\r\nimport getTotalPointsCount from './total-points-count'\r\n\r\nconst renderPlayerPage = async (state: PlayerState, container: HTMLElement): Promise<void> => {\r\n  const reset = () => { container!.innerHTML = '' }\r\n\r\n  reset()\r\n\r\n  if (!state.player) {\r\n    container!.appendChild(htmlToElement(`\r\n      <h1>Oops, something went wrong!</h1>\r\n    `))\r\n  } else {\r\n    const name = await state.player.getName()\r\n    container!.appendChild(htmlToElement(`<h1>${name}</h1>`))\r\n    container!.appendChild(getPlayerTable(state))\r\n    container!.appendChild(getTotalPointsCount(state))\r\n  }\r\n}\r\n\r\nexport default renderPlayerPage\r\n","const getLoader = () => {\r\n  const x = document.createElement('div')\r\n  x.classList.add(...['loader', 'center'])\r\n  x.innerHTML = 'Loading ...'\r\n  return x\r\n}\r\n\r\nexport default getLoader\r\n","import getPlayerMap from '../../modules/rankings/get-map'\r\nimport PlayerState from '../states/PlayerState'\r\nimport renderPlayerPage from '../ui/components/player-page'\r\nimport { fetchUser } from '../../modules/speedruncom/wrapper'\r\nimport SpeedrunId from '../../modules/speedruncom/models/SpeedrunId'\r\nimport getLoader from '../ui/components/loader'\r\n\r\nconst main = async () => {\r\n  const CONTAINER = document.getElementById('player-container')\r\n\r\n  CONTAINER!.appendChild(getLoader())\r\n\r\n  const render = (s: PlayerState) => {\r\n    return renderPlayerPage(s, CONTAINER!)\r\n  }\r\n  const abort = () => {\r\n    return render({ player: null })\r\n  }\r\n\r\n  const playerParam = new URLSearchParams(window.location.search).get('player')\r\n  if (!playerParam) {\r\n    return abort()\r\n  }\r\n\r\n  const pMap = await getPlayerMap()\r\n\r\n  // render if id exists in table\r\n  if (pMap.has(playerParam)) {\r\n    return await render({ player: pMap.get(playerParam) })\r\n  }\r\n\r\n  // try fetching id if name is given instead\r\n  let id: SpeedrunId\r\n  try {\r\n    id = await (await fetchUser(playerParam)).data.id\r\n    if (!pMap.has(id)) {\r\n      throw new Error()\r\n    }\r\n    await render({ player: pMap.get(id) })\r\n  } catch {\r\n    return abort()\r\n  }\r\n}\r\n\r\nmain()\r\n"]}