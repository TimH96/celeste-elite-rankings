{"version":3,"sources":["modules/speedruncom/constants/celeste.ts","modules/speedruncom/wrapper.ts","modules/speedruncom/get-data.ts","modules/speedruncom/constants/subcategories.ts","modules/speedruncom/grid-transformation.ts","modules/rankings/scoring.ts","modules/rankings/models/Player.ts","modules/rankings/build-map.ts","app/main.ts","index.ts"],"names":[],"mappings":"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WmH,OAAA,CAAA,uBAAA,GAAA,uBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AFvDnH,ADAA,ICAA,ADAA,KCAA,ADAA,GCAA,ADAA,ICAA,ADAA;;;;AKGA,IAAA,SAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AEHA,ADAA,ADIA,AJCA,ADLA,IOAA,ADAA,ADIA,AJCA,ADLA,KOAA,ADAA,GCAA,ADAA,CDIA,AJCA,ADLA,GOAA,ADAA,ADIA,AJCA,ADLA,OKIA,AJCA,ADLA,CKIA,AJCA,ADLA,WCKA,CIDA,AJCA,CIDA,QLJA,CAAA;;AKMA,AJQA,ADLA,IKHA,AJQM,ADLA,IAAI,EKHV,CLGa,cCKc,GAAG,CDL9B,QCKM,qBAAwB,GAAA;AIR9B,AJQ8B,ADJ9B,IAAM,KCIwB,MDJb,GCIa,ADJV,CCIU,GDJ9B,ECI8B,EAAA,KAAA,CAAA,EAAU,OAAV,EAAiB,YAAA;AIR/C,YAAA;AASE,ALHF,IAAM,OKGJ,ILHe,EKGf,CAAa,ALHK,EKGlB,EAA6B,KLHzB,SKGJ,EAAqD,ALHnC,GAAA;AOXpB,ADCA,ADSU,ALER,IOZF,ADCA,KDSU,ALED,GMXT,ECDA,AFUU,CCTV,ECDA,AFU6C,KLEzB,EOZpB,CAAA,CFUU,ALED,GAAe,CMXxB,CAAA,KNWS,EMXT,CAAA,ANWgC,WAA9B,MMXF,CAAA,CCDA,ADCA,CCDA;AFeI,ALFH,CAFD,QKIS,EAAL,GAAU,EAAV;AEdJ,ADEA,ADaI,AJFa,IMbjB,ADEM,KDaG,QJFQ,CKXG,ADahB,AJFa,GKXM,ADaF,IEfrB,GAAA,EDEM,KCFN,AFemC,CEfnC,AFeoC,GAAf,CAAmB,ICbjB,CAAO,IAAP,CDakB,CCbI,MDaL,EAAQ,qBEfhD,CAAA;ADE6C,ADaQ,AJFpC,ADCjB,IAAM,KMZuC,IDaQ,IAAI,CCbZ,CAAA,ANYxB,GKCgC,ALD7B,CKC0D,CCbrC,EAAA,IDaQ,CCbR,ADaQ,ALD/C,CMZuC,EAAG,OAAH,EAAU,GNY/B,CAAO,KAAP,EAA6B,CMZE,ONY/B,EAAuD;AOb/E,AFc0F,AJFzE,ADC8D,IOb/E,CFcqB,CAAjB,GLD2E,GCDxD,GMZvB,GAAA,APa+E,CAAA,ECDxD,CAAA,EDCwD,EAAA,KAAA,CAAA,COb/E,ANYuB,CMZvB,APakF,CCDjE,CAAA,KMZjB,APa+E,COb/E,CPayF,YAAA,kBObzF,CAAA,CAAA;AFeI,SAAK,gBAAL,GAAwB,cAAc,CAAC,GAAf,CAAmB,UAAC,CAAD,EAAE;AEbjD,ADAQ,ADa8C,IEbhD,EDAE,ECAE,EDAE,CCAC,EDAE,ADauC,CAAA,GCbnC,GCAb,ADAS,EAAP,ECAK,GAAA;AAAA,ADCL,ADY+C,AJH/C,KIGoB,CCZpB,ADYJ,GEbS,CNUL,MAAM,EMVD,CAAA,ANUI,CKTK,CLSL,CAAA,CKTQ,CCDZ,EAAA,ANUI,CKTY,CAAC,ALStB,GMVK,ADCY,CCDZ,ADCqB,ECDrB,KAAA,CAAA,EAAA,ADCsB,GAAD,EAAI,OCDzB;ADC8B,ADaxC,AJHmB,ADCZ,eMXiC,ELUrB,ADCZ,CMXoC,ALUxB,ADCZ,CMXqC,MAAJ;AAAU,ADenD,AJLoB,ADCZ,OMXe,CAAjB;AAEN,ALQoB,ADCZ,MMTR,IAAI,CAAC,CLQqB,ADCZ,KAAK,CMTnB,ANSuB,CMTV,ELQa,CAAA,OKRZ,ANSoB,KAAE,MMTvB,EAAc,ALQD,CKRb,ALQkC,EKRnB,ILQyB,CAAC,ADC/B,GAA8B,CCDN,CAAY,CAAZ,CAArB,CAAN,CAAA,GDCiC,CAAA,OAA9B,GAAqC,SAArC,GAA+C,KAAK,CAAC,EAArD,GAAuD,GAAvD,GAA2D,QAAQ,CAAC,EAAxE,CAAX,CAAA;AMRN,eAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,KAAD,EAAQ,CAAR,EAAS;AAC3B,ADYJ,EAAA,MAAA,CAAA,QCZI,CDYJ,CAAA,GCZS,CAAC,IAAN,CAAW,EDYf,GAAA,ECZI,CAAmB,ODYV,CAAb,ECZwB,ADYW,CCZZ,ADYvB,ECZyB,ADYqB,CAA9C,EAAuD;ACXjD,ADYJ,AJPI,ADCN,SKMO,CJPD,MKLM,CAAC,ANMb,CKME,ALNF,CKMiB,CCZD,ADYd,AJPc,CKLC,CAAC,ADYE,CAAlB,AJPkB,EKLJ,ALKI,CKLE,ALKF,CIOK,CAAvB,EJPkB,EAAd,CKLU,CAAc,CAAd,CAAV,CADmB,CAGnB;ADWL,AJPY,ADAb,GKKA,cJLa,CAAA;AMXA,ADQP,ALGO,ADAb,YAAQ,EAAA,CAAA,CMHE,CCRG,ADQF,CCRE,ADQD,CNGJ,CMHF,CNGC,CMHS,ANGkF,IAA3F,EAAP,CAAA;AOXa,ADSL,ADWD,AJTM,EISN,MAAA,CAAA,GJTY,EKFX,IAAI,ADWL,CCXM,ADWN,AJTmB,CAAC,EKFnB,CAAS,ALEE,CKFD,ALEa,CKFZ,EAAX,KAAkB,ELEe,CAAC,CKFZ,ADWvB,CCXwB,EDW/B,AJT+B,CKFL,ALEqB,CKFZ,CAAC,CAAC,ALEN,CAAoB,CKFzB,EAAe,EDWf,ECXmB,CDW7C,EAAqC,AJTe,GAAD,EKFN,ALEU,CKFV,OAAJ,CAAW,CAAC,CAAC,EAAb,EAAiB,cAAjB,CAAf,CAAlB;ACTK,ADUL,ADWN,AJTA,QISI,IErBc,CFqBT,KCXG,CLEL,CKFO,GAAG,CCVC,ENYJ,CKFO,ALEN,CKFO,CDWlB,CAAsB,AJTnB,CKFU,ALEE,CKFO,CAAC,ADWvB,CCXwB,ADW5B,ECXiB,ADWe,CCX1B,ALEmB,CAAC,IAAP,CAAY,GAAZ,CAAgB,UAAC,GAAD,EAAI;AMZrB,ADWZ,ADWJ,AJTA,GDHyE,CAAA,SKYlE,CCXH,EAAE,CAAC,CDWK,CEtBI,ENaT,OMbS,ADWZ,CCXY,ADWG,CAAf,ALEG,CAAA,CKFe,CAAlB,CCXY,AFsBT,CCXkB,ADWI,CEtBb,ADWZ,EDWG,CAAP,EEtBgB,CAAA,EAAA,ENaT,CAAgB,EMbP,CAAA,ANaT,EMbS,ANaY,GAArB,CAAP,QMbgB;ADYb,ADWJ,AJTA,ADFJ,CAFD,YCEuB,CAAZ,CAAP;AKCG,ALEJ,WKXG,ALO2B,CKP3B,ALOe,CAAN,CAAA;AKEP,ADYJ,ALKK,OAAA,CKLC,ALKD,CM3BL,CAAA,CDsBS,GAAG,KAAK,ILKZ,GAAA,EKLO,CAAe,GAAf,EAAoB,MAApB,CAA2B,ALKlC,UKLmC,GAAD,EAAM,CAAN,EAAO;ACX7C,ADWkD,OCvBrD,MDuBqD,GAAG,GAAG,MAAM,CAAC,SAAP,CAAiB,CAAjB,CAAN;AEvBvC,ADed,ADQ8E,AJdxE,ADGR,IAAM,CKWU,EAAkE,CAAlE,CAAZ,CJdI,GKMN,CAAA,ALNU,CDGK,ECHF,CDGK,CCHL,CAAA,IAAA,EAAP,CMTQ,APYV,COZU,UPYI,GAAA;AOZJ,ADed,ADSE,AJVgB,ADFA,SKYX,ALZW,QCEA,CAAA,ADFA,CAAA,KAAA,CKYhB,CAAsB,ALZN,GKYhB,ELZgB,CAAA,CKYa,CLZH,EKY1B,KLZgB,EAAiB,YAAA;AOZrB,ADed,ADWE,AJZgB,QKCX,GDWE,CCXT,CAAA,CDWE,QE1BkB,UAAA,CAAA,qBAAA,EAAN,CAEZ;AAFY,AF2Bb,AJbiB,GIIX,SJJiB,OAAO,CAAC,CMdlB,ENcU,CAAY,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAgB,UAAC,GAAD,EAAI;AAAK,GKlBlB,CAAA,eLkBkB,SAAA,CAAA,mBAAA,CAAoB,GAApB,CAAA;AKE9D,ADaC,AJfqF,ADDvE,CMjBhB,CDiCE,MAAA,CAAA,EJfoC,CAAZ,CAAN,CAAA,GDDJ,CAAA,KKgBd,CAAW,MAAA,CAAA,SAAX,EAAW,aAAX,EAAsB;AE7Bd,APaM,SKgBd,WE7BQ,GAAG,CF6BX,EE7Bc,EAAA,CAAA,IAAA,EAAN;AAGA,ADeV,ADWE,ALhBc,OMKhB,CAAA,EDWE,ELhBoB,GMKtB,ADWE,ELhByB,CMKZ,ADWb,ALhB6B,EOVrB,EF0BR,OE1BiB,APUuB,GOVpB,ADetB,ENL4C,COVnB,CAAC,OPUK,EOVT,CAAc,APUkB,GOVhC,CAAkB,KPUc,CAAA,IOVb,GPUV,GAA8B,EOVrB,EAAS,KPUtB,CAAX,CAAA;AOVsC,ANW9C,UAAA,SAAS,GAAG,EAAA,CAAA,IMXkC,ANWlC,EAAZ,MMXsD,CAAC,IAAT;AAAa,AF2B/D,AJdF,aIcS,IJdT,CIcc,AJdd,GMboB,CAAZ,YF2BC,CAAsB,MAAtB,CAA6B,UAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAU;AE1B1C,AF0B+C,AJdrD,ADHO,eKiB8C,ELjB9C,CKiBiD,ALjBjD,EOTD,CF0BqD,GE1BjD,EF0BqD,CE1BvC,AF0BwC,GE1BrC,CAAC,IAAJ,CAAS,GAAT,CAAa,IF0BsB,CAAuB,CAAvB,C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","file":"src.77de5100.js","sourceRoot":"..\\src","sourcesContent":["import SpeedrunId from '../models/SpeedrunId'\r\n\r\nconst GAME_ID: SpeedrunId = 'o1y9j9v6'\r\nconst GAME_NAME = 'Celeste'\r\n\r\nexport { GAME_ID, GAME_NAME }\r\n","import { GAME_ID } from './constants/celeste'\r\nimport SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunId from './models/SpeedrunId'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunUser from './models/SpeedrunUser'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\nconst HREF = 'www.speedrun.com'\r\nconst API_VERSION = 'v1'\r\n\r\nconst getBasePath = () => {\r\n  return `https://${HREF}/api/${API_VERSION}`\r\n}\r\n\r\nconst fetchLevelBoard = async (level: SpeedrunLevel, category: SpeedrunCategory): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  return (await fetch(`${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${category.id}`)).json()\r\n}\r\n\r\nconst fetchLevels = async (): Promise<SpeedrunApiResponse<SpeedrunLevel[]>> => {\r\n  return await (await fetch(`${getBasePath()}/games/${GAME_ID}/levels`)).json()\r\n}\r\n\r\nconst fetchLevelCategories = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunCategory[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/categories`)).json()\r\n}\r\n\r\nconst fetchLevelVariables = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunVariable[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/variables`)).json()\r\n}\r\n\r\nconst fetchUser = async (user: SpeedrunId): Promise<SpeedrunApiResponse<SpeedrunUser>> => {\r\n  return await (await fetch(`${getBasePath()}/users/${user}`)).json()\r\n}\r\n\r\nexport { fetchLevelBoard, fetchLevels, fetchLevelCategories, fetchLevelVariables, fetchUser }\r\n","import SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport { fetchLevelCategories, fetchLevelBoard, fetchLevels, fetchLevelVariables } from './wrapper'\r\n\r\ninterface RawDataCollection {\r\n    categories: SpeedrunApiResponse<SpeedrunCategory[]>,\r\n    levels: SpeedrunApiResponse<SpeedrunLevel[]>,\r\n    grid: SpeedrunApiResponse<SpeedrunLeaderboard>[][],\r\n    variables: SpeedrunApiResponse<SpeedrunVariable[]>[]\r\n}\r\n\r\nconst getRawLeaderboardData = async (): Promise<RawDataCollection> => {\r\n  const levels = await fetchLevels()\r\n  const categories = (await fetchLevelCategories(levels.data[0]))\r\n  const grid = await Promise.all(categories.data.map((cat) => {\r\n    return Promise.all(levels.data.map((lvl) => {\r\n      return fetchLevelBoard(lvl, cat)\r\n    }))\r\n  }))\r\n  const variables = await Promise.all(levels.data.map((lvl) => fetchLevelVariables(lvl)))\r\n\r\n  return {\r\n    categories,\r\n    levels,\r\n    grid,\r\n    variables\r\n  }\r\n}\r\n\r\nexport { getRawLeaderboardData }\r\n","const COLLECTIBLES_VARIABLE_NAME = 'Full Clear / ARB / HC'\r\nconst FC_RUN_VALUE = 'Full Clear'\r\n\r\nexport { COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE }\r\n","import { COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE } from './constants/subcategories'\r\nimport LevelGrid from './models/LevelGrid'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\n/** function that transforms a LevelGrid in some way */\r\ntype gridTransformationFunction = (grid: LevelGrid) => LevelGrid;\r\n\r\n/** returns a gridTransformationFunction, using the given callback function in grid.map */\r\nconst getGridMapTransformation = (func: (levelColumn: SpeedrunLeaderboard[], i: number) => SpeedrunLeaderboard[]): gridTransformationFunction => {\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return grid.map((levelColumn, i) => func(levelColumn, i))\r\n  }\r\n}\r\n\r\n/** remove Collectibles category from the grid entirely */\r\nconst removeCollectiblesCategory = (grid: LevelGrid): LevelGrid => {\r\n  return grid.filter((_, i) => i !== 1)\r\n}\r\n\r\nconst getFilterFullClearRuns = (variables: SpeedrunVariable[][]): gridTransformationFunction => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 1 /* only filter runs in the collectibles column */) {\r\n      return levelColumn.map((level, i) => {\r\n        // find the 2 relevant IDs based on variable name and run value label\r\n        const variable = variables[i].find((x) => x.name === COLLECTIBLES_VARIABLE_NAME)\r\n        const value = Object.entries(variable!.values.values).find(([_key, val]) => val.label === FC_RUN_VALUE)\r\n\r\n        // throw out if run is of not of given subcategory\r\n        level.runs = level.runs.filter((run) =>\r\n                    run.run.values![variable!.id] === value![0]\r\n        )\r\n\r\n        return level\r\n      })\r\n    }\r\n    return levelColumn\r\n  }\r\n\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return getGridMapTransformation(callback)(grid)\r\n  }\r\n}\r\n\r\nconst removeFarewellObsoletes = (grid: LevelGrid): LevelGrid => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 0) {\r\n      return levelColumn\r\n    }\r\n    return levelColumn.filter((_, i) => i !== 8)\r\n  }\r\n\r\n  return getGridMapTransformation(callback)(grid)\r\n}\r\n\r\nexport { gridTransformationFunction, getGridMapTransformation, removeCollectiblesCategory, getFilterFullClearRuns, removeFarewellObsoletes }\r\n","import SpeedrunRankedRun from '../speedruncom/models/SpeedrunRankedRun'\r\n\r\ntype scoringFunction = (r: SpeedrunRankedRun) => number\r\n\r\nconst eliteScoring = (run: SpeedrunRankedRun): number => {\r\n  if (run.place === 1) { return 100 }\r\n  if (run.place === 2) { return 97 }\r\n  return Math.max(0, 98 - run.place)\r\n}\r\n\r\nexport { scoringFunction, eliteScoring }\r\n","import SpeedrunId from '../../speedruncom/models/SpeedrunId'\r\nimport SpeedrunRankedRun from '../../speedruncom/models/SpeedrunRankedRun'\r\nimport RankingGrid from './RankingGrid'\r\nimport { fetchUser } from '../../speedruncom/wrapper'\r\nimport { eliteScoring, scoringFunction } from '../scoring'\r\n\r\nexport default class Player {\r\n  id: SpeedrunId\r\n  timesPage: RankingGrid\r\n\r\n  private _pointsPerColumn: number[]\r\n  private _name: string | null | undefined = undefined\r\n\r\n  static scoringFn: scoringFunction = eliteScoring\r\n\r\n  constructor (id: SpeedrunId, gridDimensions: number[]) {\r\n    this.id = id\r\n    this.timesPage = gridDimensions.map((colSize) => new Array<SpeedrunRankedRun>(colSize))\r\n    this._pointsPerColumn = gridDimensions.map((_) => 0)\r\n  }\r\n\r\n  /** register run r in the grid at position i, j */\r\n  registerRun (r: SpeedrunRankedRun, i: number, j: number) {\r\n    this.timesPage[i][j] = r\r\n  }\r\n\r\n  public getPointsOfColumn (col: number): number {\r\n    if (this._pointsPerColumn[col]) {\r\n      return this._pointsPerColumn[col]\r\n    }\r\n\r\n    const val = this.timesPage[col].reduce((sum, r) => sum + Player.scoringFn(r), 0)\r\n    this._pointsPerColumn[col] = val\r\n\r\n    return val\r\n  }\r\n\r\n  public get totalPoints () {\r\n    return this._pointsPerColumn.reduce((sum, _, i) => sum + this.getPointsOfColumn(i), 0)\r\n  }\r\n\r\n  /**\r\n   * this getter should be used with caution, preferably when absolutely certain that the name of\r\n   * a player is already loaded\r\n   *\r\n   * otherwise use the async version getName\r\n   */\r\n  public get name () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    fetchUser(this.id).then(val => {\r\n      const n = val.data.names.international\r\n      this._name = n\r\n\r\n      return n\r\n    })\r\n\r\n    return ''\r\n  }\r\n\r\n  public async getName () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    const n = await (await fetchUser(this.id)).data.names.international\r\n    this._name = n\r\n\r\n    return n\r\n  }\r\n}\r\n","import LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport SpeedrunId from '../speedruncom/models/SpeedrunId'\r\nimport Player from './models/Player'\r\n\r\nconst buildPlayerMap = async (grid: LevelGrid): Promise<Map<SpeedrunId, Player>> => {\r\n  const pMap = new Map<SpeedrunId, Player>()\r\n  const gridDimensions = grid.map((col) => col.length)\r\n\r\n  grid.forEach((levelColumn, i) =>\r\n    levelColumn.forEach((board, j) =>\r\n      board.runs.forEach((r) => {\r\n        const p = r.run.players[0]\r\n\r\n        // skip players without id (deleted users)\r\n        if (p.id) {\r\n          pMap.has(p.id) || pMap.set(p.id, new Player(p.id, gridDimensions))\r\n          const pl = pMap.get(p.id)!\r\n          pl.registerRun(r, i, j)\r\n        }\r\n      })\r\n    )\r\n  )\r\n\r\n  return pMap\r\n}\r\n\r\nexport default buildPlayerMap\r\n","import LevelGrid from '../modules/speedruncom/models/LevelGrid'\r\nimport { getRawLeaderboardData } from '../modules/speedruncom/get-data'\r\nimport { getFilterFullClearRuns, gridTransformationFunction, removeCollectiblesCategory, removeFarewellObsoletes } from '../modules/speedruncom/grid-transformation'\r\nimport buildPlayerMap from '../modules/rankings/build-map'\r\n\r\nconst main = async () => {\r\n  const pMap = await (async () => {\r\n    // fetch data\r\n    const raw = await getRawLeaderboardData()\r\n\r\n    // remove .data ApiResponse\r\n    const variables = raw.variables.map((variable) => variable.data)\r\n    let grid: LevelGrid = raw.grid.map((categoryRow) => categoryRow.map((levelBoard) => levelBoard.data))\r\n\r\n    // transform grid\r\n    const transformations: gridTransformationFunction[] = [\r\n      removeFarewellObsoletes,\r\n      getFilterFullClearRuns(variables), // this is currently unused because collectibles are removed entirely\r\n      removeCollectiblesCategory\r\n    ]\r\n    transformations.forEach((tFunc) => { grid = tFunc(grid) })\r\n\r\n    // build and return player map\r\n    return await buildPlayerMap(grid)\r\n  })()\r\n\r\n  // testing script\r\n  const arr = Array.from(pMap.values()).sort((a, b) => b.totalPoints - a.totalPoints).slice(0, 50)\r\n  await Promise.all(arr.map(async (p) => await p.getName()))\r\n\r\n  arr.forEach(p => console.log({ name: p.name, score: p.totalPoints, id: p.id }))\r\n}\r\n\r\nexport default main\r\n","import main from './app/main'\r\n\r\nmain()\r\n"]}