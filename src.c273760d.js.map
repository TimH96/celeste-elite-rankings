{"version":3,"sources":["modules/speedruncom/constants/celeste.ts","modules/speedruncom/wrapper.ts","modules/speedruncom/get-data.ts","modules/speedruncom/constants/subcategories.ts","modules/speedruncom/grid-transformation.ts","modules/rankings/scoring.ts","modules/rankings/models/Player.ts","modules/rankings/build-map.ts","app/models/AppEvent.ts","app/models/TableSelection.ts","app/ui/points-getter.ts","app/ui/array-helper.ts","app/ui/components/control-buttons.ts","app/ui/html-helper.ts","app/ui/components/leaderboard-table.ts","app/ui/components/load-more-button.ts","app/ui/components/loader.ts","app/ui/render-dynamic.ts","app/main.ts","index.ts"],"names":[],"mappings":"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","file":"src.c273760d.js","sourceRoot":"..\\src","sourcesContent":["import SpeedrunId from '../models/SpeedrunId'\r\n\r\nconst GAME_ID: SpeedrunId = 'o1y9j9v6'\r\nconst GAME_NAME = 'Celeste'\r\n\r\nexport { GAME_ID, GAME_NAME }\r\n","import { GAME_ID } from './constants/celeste'\r\nimport SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunId from './models/SpeedrunId'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunUser from './models/SpeedrunUser'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\nconst HREF = 'www.speedrun.com'\r\nconst API_VERSION = 'v1'\r\n\r\nconst getBasePath = () => {\r\n  return `https://${HREF}/api/${API_VERSION}`\r\n}\r\n\r\nconst fetchLevelBoard = async (level: SpeedrunLevel, category: SpeedrunCategory): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  return (await fetch(`${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${category.id}`)).json()\r\n}\r\n\r\nconst fetchLevels = async (): Promise<SpeedrunApiResponse<SpeedrunLevel[]>> => {\r\n  return await (await fetch(`${getBasePath()}/games/${GAME_ID}/levels`)).json()\r\n}\r\n\r\nconst fetchLevelCategories = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunCategory[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/categories`)).json()\r\n}\r\n\r\nconst fetchLevelVariables = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunVariable[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/variables`)).json()\r\n}\r\n\r\nconst fetchUser = async (user: SpeedrunId): Promise<SpeedrunApiResponse<SpeedrunUser>> => {\r\n  return await (await fetch(`${getBasePath()}/users/${user}`)).json()\r\n}\r\n\r\nexport { fetchLevelBoard, fetchLevels, fetchLevelCategories, fetchLevelVariables, fetchUser }\r\n","import SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport { fetchLevelCategories, fetchLevelBoard, fetchLevels, fetchLevelVariables } from './wrapper'\r\n\r\ninterface RawDataCollection {\r\n    categories: SpeedrunApiResponse<SpeedrunCategory[]>,\r\n    levels: SpeedrunApiResponse<SpeedrunLevel[]>,\r\n    grid: SpeedrunApiResponse<SpeedrunLeaderboard>[][],\r\n    variables: SpeedrunApiResponse<SpeedrunVariable[]>[]\r\n}\r\n\r\nconst getRawLeaderboardData = async (): Promise<RawDataCollection> => {\r\n  const levels = await fetchLevels()\r\n  const categories = (await fetchLevelCategories(levels.data[0]))\r\n  const grid = await Promise.all(categories.data.map((cat) => {\r\n    return Promise.all(levels.data.map((lvl) => {\r\n      return fetchLevelBoard(lvl, cat)\r\n    }))\r\n  }))\r\n  const variables = await Promise.all(levels.data.map((lvl) => fetchLevelVariables(lvl)))\r\n\r\n  return {\r\n    categories,\r\n    levels,\r\n    grid,\r\n    variables\r\n  }\r\n}\r\n\r\nexport { getRawLeaderboardData }\r\n","const COLLECTIBLES_VARIABLE_NAME = 'Full Clear / ARB / HC'\r\nconst FC_RUN_VALUE = 'Full Clear'\r\n\r\nexport { COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE }\r\n","import { COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE } from './constants/subcategories'\r\nimport LevelGrid from './models/LevelGrid'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\n/** function that transforms a LevelGrid in some way */\r\ntype gridTransformationFunction = (grid: LevelGrid) => LevelGrid;\r\n\r\n/** returns a gridTransformationFunction, using the given callback function in grid.map */\r\nconst getGridMapTransformation = (func: (levelColumn: SpeedrunLeaderboard[], i: number) => SpeedrunLeaderboard[]): gridTransformationFunction => {\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return grid.map((levelColumn, i) => func(levelColumn, i))\r\n  }\r\n}\r\n\r\n/** remove Collectibles category from the grid entirely */\r\nconst removeCollectiblesCategory = (grid: LevelGrid): LevelGrid => {\r\n  return grid.filter((_, i) => i !== 1)\r\n}\r\n\r\nconst getFilterFullClearRuns = (variables: SpeedrunVariable[][]): gridTransformationFunction => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 1 /* only filter runs in the collectibles column */) {\r\n      return levelColumn.map((level, i) => {\r\n        // find the 2 relevant IDs based on variable name and run value label\r\n        const variable = variables[i].find((x) => x.name === COLLECTIBLES_VARIABLE_NAME)\r\n        const value = Object.entries(variable!.values.values).find(([_key, val]) => val.label === FC_RUN_VALUE)\r\n\r\n        // throw out if run is of not of given subcategory\r\n        level.runs = level.runs.filter((run) =>\r\n                    run.run.values![variable!.id] === value![0]\r\n        )\r\n\r\n        return level\r\n      })\r\n    }\r\n    return levelColumn\r\n  }\r\n\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return getGridMapTransformation(callback)(grid)\r\n  }\r\n}\r\n\r\nconst removeFarewellObsoletes = (grid: LevelGrid): LevelGrid => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 0) {\r\n      return levelColumn\r\n    }\r\n    return levelColumn.filter((_, i) => i !== 8)\r\n  }\r\n\r\n  return getGridMapTransformation(callback)(grid)\r\n}\r\n\r\nexport { gridTransformationFunction, getGridMapTransformation, removeCollectiblesCategory, getFilterFullClearRuns, removeFarewellObsoletes }\r\n","import SpeedrunRankedRun from '../speedruncom/models/SpeedrunRankedRun'\r\n\r\ntype scoringFunction = (r: SpeedrunRankedRun) => number\r\n\r\nconst eliteScoring = (run: SpeedrunRankedRun): number => {\r\n  if (run.place === 1) { return 100 }\r\n  if (run.place === 2) { return 97 }\r\n  return Math.max(0, 98 - run.place)\r\n}\r\n\r\nexport { scoringFunction, eliteScoring }\r\n","import SpeedrunId from '../../speedruncom/models/SpeedrunId'\r\nimport SpeedrunRankedRun from '../../speedruncom/models/SpeedrunRankedRun'\r\nimport RankingGrid from './RankingGrid'\r\nimport { fetchUser } from '../../speedruncom/wrapper'\r\nimport { eliteScoring, scoringFunction } from '../scoring'\r\n\r\nexport default class Player {\r\n  id: SpeedrunId\r\n  timesPage: RankingGrid\r\n\r\n  private _pointsPerColumn: number[]\r\n  private _name: string | null | undefined = undefined\r\n\r\n  static scoringFn: scoringFunction = eliteScoring\r\n\r\n  constructor (id: SpeedrunId, gridDimensions: number[]) {\r\n    this.id = id\r\n    this.timesPage = gridDimensions.map((colSize) => new Array<SpeedrunRankedRun>(colSize))\r\n    this._pointsPerColumn = gridDimensions.map((_) => 0)\r\n  }\r\n\r\n  /** register run r in the grid at position i, j */\r\n  registerRun (r: SpeedrunRankedRun, i: number, j: number) {\r\n    this.timesPage[i][j] = r\r\n  }\r\n\r\n  public getPointsOfColumn (col: number): number {\r\n    if (this._pointsPerColumn[col]) {\r\n      return this._pointsPerColumn[col]\r\n    }\r\n\r\n    const val = this.timesPage[col].reduce((sum, r) => sum + Player.scoringFn(r), 0)\r\n    this._pointsPerColumn[col] = val\r\n\r\n    return val\r\n  }\r\n\r\n  public get totalPoints () {\r\n    return this._pointsPerColumn.reduce((sum, _, i) => sum + this.getPointsOfColumn(i), 0)\r\n  }\r\n\r\n  /**\r\n   * this getter should be used with caution, preferably when absolutely certain that the name of\r\n   * a player is already loaded\r\n   *\r\n   * otherwise use the async version getName\r\n   */\r\n  public get name () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    fetchUser(this.id).then(val => {\r\n      const n = val.data.names.international\r\n      this._name = n\r\n\r\n      return n\r\n    })\r\n\r\n    return ''\r\n  }\r\n\r\n  public async getName () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    try {\r\n      const n = await (await fetchUser(this.id)).data.names.international\r\n      this._name = n\r\n    } catch {\r\n      this._name = `UNLOADED: ${this.id}`\r\n    }\r\n\r\n    return this._name\r\n  }\r\n}\r\n","import LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport SpeedrunId from '../speedruncom/models/SpeedrunId'\r\nimport Player from './models/Player'\r\n\r\nconst buildPlayerMap = async (grid: LevelGrid): Promise<Map<SpeedrunId, Player>> => {\r\n  const pMap = new Map<SpeedrunId, Player>()\r\n  const gridDimensions = grid.map((col) => col.length)\r\n\r\n  grid.forEach((levelColumn, i) =>\r\n    levelColumn.forEach((board, j) =>\r\n      board.runs.forEach((r) => {\r\n        const p = r.run.players[0]\r\n\r\n        // skip players without id (deleted users)\r\n        if (p.id) {\r\n          pMap.has(p.id) || pMap.set(p.id, new Player(p.id, gridDimensions))\r\n          const pl = pMap.get(p.id)!\r\n          pl.registerRun(r, i, j)\r\n        }\r\n      })\r\n    )\r\n  )\r\n\r\n  return pMap\r\n}\r\n\r\nexport default buildPlayerMap\r\n","/* eslint-disable no-unused-vars */\r\nenum AppEvent {\r\n    UPDATE_STATE = 'updateState',\r\n}\r\n\r\nexport default AppEvent\r\n","/* eslint-disable no-unused-vars */\r\nenum TableSelection {\r\n    TOTAL = 'Total',\r\n    A_SIDES = 'A-Sides',\r\n    B_SIDES = 'B-Sides',\r\n    C_SIDES = 'C-Sides',\r\n}\r\n\r\nexport default TableSelection\r\n","import Player from '../../modules/rankings/models/Player'\r\nimport TableSelection from '../models/TableSelection'\r\n\r\nconst getPointsGetter = (sel: TableSelection) => {\r\n  switch (sel) {\r\n    case TableSelection.TOTAL:\r\n      return (p: Player) => p.totalPoints\r\n\r\n    case TableSelection.A_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(0)\r\n\r\n    case TableSelection.B_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(1)\r\n\r\n    case TableSelection.C_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(2)\r\n\r\n    default:\r\n      return (p: Player) => p.totalPoints\r\n  }\r\n}\r\n\r\nexport default getPointsGetter\r\n","/**\r\n * collection of functions to help transform the player array based on user input\r\n */\r\n\r\nimport Player from '../../modules/rankings/models/Player'\r\nimport AppState from '../models/AppState'\r\nimport getPointsGetter from './points-getter'\r\n\r\nconst getSorterFunction = (s: AppState) => {\r\n  const getter = getPointsGetter(s.tableSelection)\r\n  return (a: Player, b: Player) => getter(b) - getter(a)\r\n}\r\n\r\nexport { getSorterFunction }\r\n","import AppEvent from '../../models/AppEvent'\r\nimport AppState from '../../models/AppState'\r\nimport TableSelection from '../../models/TableSelection'\r\n\r\nconst getCallback = (s: AppState, type: TableSelection) => {\r\n  return () => {\r\n    s.tableSelection = type\r\n    document.dispatchEvent(new CustomEvent<AppState>(AppEvent.UPDATE_STATE, { detail: s }))\r\n  }\r\n}\r\n\r\nconst getButton = (s: AppState, type: TableSelection) => {\r\n  const btn = document.createElement('button')\r\n  btn.innerHTML = type\r\n  btn.disabled = (type === s.tableSelection)\r\n  btn.addEventListener('click', getCallback(s, type))\r\n  return btn\r\n}\r\n\r\nconst getControlButtons = (s: AppState) => {\r\n  const l = document.createElement('li')\r\n  l.classList.add('control-buttons')\r\n\r\n  const selections = [\r\n    TableSelection.TOTAL,\r\n    TableSelection.A_SIDES,\r\n    TableSelection.B_SIDES,\r\n    TableSelection.C_SIDES\r\n  ]\r\n\r\n  for (const type of selections) {\r\n    l.appendChild(getButton(s, type))\r\n  }\r\n\r\n  return l\r\n}\r\n\r\nexport default getControlButtons\r\n","const htmlToElement = (html: string): Node => {\r\n  const template = document.createElement('template')\r\n  html = html.trim()\r\n  template.innerHTML = html\r\n  return template.content.firstChild as Node\r\n}\r\n\r\nexport default htmlToElement\r\n","import Player from '../../../modules/rankings/models/Player'\r\nimport AppState from '../../models/AppState'\r\nimport htmlToElement from '../html-helper'\r\nimport getPointsGetter from '../points-getter'\r\n\r\nconst getTableElement = (\r\n  place: string | number,\r\n  name: string,\r\n  points: string | number\r\n) => {\r\n  return htmlToElement(`\r\n        <tr>\r\n            <td>${place}</td>\r\n            <td>${name}</td>\r\n            <td>${points}</td>\r\n        </tr>\r\n    `)\r\n}\r\n\r\nconst getTableHeader = (\r\n  place: string,\r\n  name: string,\r\n  points: string\r\n) => {\r\n  return htmlToElement(`\r\n        <tr>\r\n            <th>${place}</th>\r\n            <th>${name}</th>\r\n            <th>${points}</th>\r\n        </tr>\r\n    `)\r\n}\r\n\r\nconst getLeaderboardTable = (s: AppState, arr: Player[]) => {\r\n  const t = document.createElement('table')\r\n  const getter = getPointsGetter(s.tableSelection)\r\n  t.classList.add('leaderboard-table')\r\n\r\n  const head = getTableHeader('Place', 'Name', 'Points') as HTMLElement\r\n  t.appendChild(head)\r\n\r\n  arr.forEach((p, i) => t.appendChild(getTableElement(\r\n    i + 1,\r\n    p.name,\r\n    getter(p)\r\n  )))\r\n\r\n  return t\r\n}\r\n\r\nexport default getLeaderboardTable\r\n","import AppEvent from '../../models/AppEvent'\r\nimport AppState from '../../models/AppState'\r\n\r\nconst getLoadMoreButton = (s: AppState, max: number) => {\r\n  if (s.tableState >= max) {\r\n    return document.createElement('div')\r\n  }\r\n\r\n  const d = document.createElement('div')\r\n  d.classList.add('center')\r\n\r\n  const btn = document.createElement('button')\r\n  btn.innerHTML = 'Load 50 more ...'\r\n\r\n  btn.addEventListener('click', () => {\r\n    s.tableState = (s.tableState + 50)\r\n    document.dispatchEvent(new CustomEvent<AppState>(AppEvent.UPDATE_STATE, { detail: s }))\r\n  })\r\n\r\n  d.appendChild(btn)\r\n  return d\r\n}\r\n\r\nexport default getLoadMoreButton\r\n","import htmlToElement from '../html-helper'\r\n\r\nconst getLoader = () => {\r\n  return htmlToElement('<div class=\"loader center\">Loading...</div>')\r\n}\r\n\r\nexport default getLoader\r\n","import AppState from '../models/AppState'\r\nimport { getSorterFunction } from './array-helper'\r\nimport getControlButtons from './components/control-buttons'\r\nimport getLeaderboardTable from './components/leaderboard-table'\r\nimport getLoadMoreButton from './components/load-more-button'\r\nimport getLoader from './components/loader'\r\n\r\nconst renderDynamicContainer = async (state: AppState): Promise<void> => {\r\n  const container = document.getElementById('dynamic-container')\r\n  const reset = () => { container!.innerHTML = '' }\r\n\r\n  reset()\r\n\r\n  // add loader as arranging array might include loading player names\r\n  container!.appendChild(getLoader())\r\n\r\n  // arrange data based on state\r\n  const arr = Array.from(state.players.values())\r\n    .sort(getSorterFunction(state))\r\n    .slice(0, state.tableState)\r\n\r\n  // load all names\r\n  await Promise.all(arr.map(async (p) => await p.getName()))\r\n\r\n  // remove loader again\r\n  reset()\r\n\r\n  // render dynamic container based on state\r\n  container!.appendChild(getControlButtons(state))\r\n  container!.appendChild(getLeaderboardTable(state, arr))\r\n  container!.appendChild(getLoadMoreButton(state, state.players.size))\r\n}\r\n\r\nexport default renderDynamicContainer\r\n","import LevelGrid from '../modules/speedruncom/models/LevelGrid'\r\nimport { getRawLeaderboardData } from '../modules/speedruncom/get-data'\r\nimport { getFilterFullClearRuns, gridTransformationFunction, removeCollectiblesCategory, removeFarewellObsoletes } from '../modules/speedruncom/grid-transformation'\r\nimport buildPlayerMap from '../modules/rankings/build-map'\r\nimport AppState from './models/AppState'\r\nimport AppEvent from './models/AppEvent'\r\nimport renderDynamicContainer from './ui/render-dynamic'\r\nimport TableSelection from './models/TableSelection'\r\n\r\nconst main = async () => {\r\n  const pMap = await (async () => {\r\n    // fetch data\r\n    const raw = await getRawLeaderboardData()\r\n\r\n    // remove .data ApiResponse\r\n    const variables = raw.variables.map((variable) => variable.data)\r\n    let grid: LevelGrid = raw.grid.map((categoryRow) => categoryRow.map((levelBoard) => levelBoard.data))\r\n\r\n    // transform grid\r\n    const transformations: gridTransformationFunction[] = [\r\n      removeFarewellObsoletes,\r\n      getFilterFullClearRuns(variables), // this is currently unused because collectibles are removed entirely\r\n      removeCollectiblesCategory\r\n    ]\r\n    transformations.forEach((tFunc) => { grid = tFunc(grid) })\r\n\r\n    // build and return player map\r\n    return await buildPlayerMap(grid)\r\n  })()\r\n\r\n  const initialState: AppState = {\r\n    players: pMap,\r\n    tableSelection: TableSelection.TOTAL,\r\n    tableState: 100\r\n  }\r\n\r\n  document.addEventListener(AppEvent.UPDATE_STATE, ((e: CustomEvent<AppState>) => {\r\n    renderDynamicContainer(e.detail)\r\n  // eslint-disable-next-line no-undef\r\n  }) as EventListener)\r\n\r\n  await renderDynamicContainer(initialState)\r\n}\r\n\r\nexport default main\r\n","import main from './app/main'\r\n\r\nmain()\r\n"]}