{"version":3,"sources":["../models/AppEvent.ts","../models/TableSelection.ts","../../modules/speedruncom/constants/celeste.ts","../../modules/speedruncom/wrapper.ts","../../modules/speedruncom/get-data.ts","../../modules/speedruncom/grid-transformation.ts","../../modules/rankings/models/Player.ts","../../modules/rankings/scoring.ts","../../modules/rankings/build-map.ts","../../modules/rankings/get-map.ts","../ui/util/points-getter.ts","../ui/util/array-helper.ts","../ui/components/control-buttons.ts","../ui/util/html-helper.ts","../ui/components/subtexts.ts","../ui/components/leaderboard-table.ts","../ui/components/load-more-button.ts","../ui/components/loader.ts","../ui/components/main-page.ts","index.ts"],"names":[],"mappings":"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","file":"pages.7aa44cba.js","sourceRoot":"..\\src\\app\\pages","sourcesContent":["/* eslint-disable no-unused-vars */\r\nenum AppEvent {\r\n    UPDATE_STATE = 'updateState',\r\n}\r\n\r\nexport default AppEvent\r\n","/* eslint-disable no-unused-vars */\r\nenum TableSelection {\r\n    TOTAL = 'Total',\r\n    A_SIDES = 'A-Sides',\r\n    COLLECTIBLES = 'Collectibles',\r\n    B_SIDES = 'B-Sides',\r\n    C_SIDES = 'C-Sides',\r\n}\r\n\r\nexport default TableSelection\r\n","/* eslint-disable no-unused-vars */\r\nimport SpeedrunId from '../models/SpeedrunId'\r\n\r\nconst GAME_ID: SpeedrunId = 'o1y9j9v6'\r\nconst GAME_NAME = 'Celeste'\r\n\r\nconst COLLECTIBLES_VARIABLE_NAME = 'Full Clear / ARB / HC'\r\nconst FC_RUN_VALUE = 'Full Clear'\r\n\r\nenum Categories {\r\n    A_SIDES = 'Clear',\r\n    COLLECTIBLES = 'Collectibles',\r\n    B_SIDES = 'B-Side',\r\n    C_SIDES = 'C-Side',\r\n}\r\n\r\nenum ChapterNames {\r\n    C1 = 'Forsaken City',\r\n    C2 = 'Old Site',\r\n    C3 = 'Celestial Resort',\r\n    C4 = 'Golden Ridge',\r\n    C5 = 'Mirror Temple',\r\n    C6 = 'Reflection',\r\n    C7 = 'The Summit',\r\n    C8 = 'Core',\r\n    C9 = 'Farewell',\r\n}\r\n\r\nexport { GAME_ID, GAME_NAME, COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE, Categories, ChapterNames }\r\n","import { GAME_ID } from './constants/celeste'\r\nimport SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunId from './models/SpeedrunId'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunUser from './models/SpeedrunUser'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\n\r\nconst HREF = 'www.speedrun.com'\r\nconst API_VERSION = 'v1'\r\n\r\nconst getBasePath = () => {\r\n  return `https://${HREF}/api/${API_VERSION}`\r\n}\r\n\r\nconst fetchLevelBoard = async (level: SpeedrunLevel, category: SpeedrunCategory): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  return (await fetch(`${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${category.id}`)).json()\r\n}\r\n\r\nconst fetchLevelBoardWithVariable = async (\r\n  level: SpeedrunLevel,\r\n  category: SpeedrunCategory,\r\n  varId: SpeedrunId,\r\n  val: SpeedrunId\r\n): Promise<SpeedrunApiResponse<SpeedrunLeaderboard>> => {\r\n  return (await fetch(`${getBasePath()}/leaderboards/${GAME_ID}/level/${level.id}/${category.id}?var-${varId}=${val}`)).json()\r\n}\r\n\r\nconst fetchLevels = async (): Promise<SpeedrunApiResponse<SpeedrunLevel[]>> => {\r\n  return await (await fetch(`${getBasePath()}/games/${GAME_ID}/levels`)).json()\r\n}\r\n\r\nconst fetchLevelCategories = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunCategory[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/categories`)).json()\r\n}\r\n\r\nconst fetchLevelVariables = async (level: SpeedrunLevel): Promise<SpeedrunApiResponse<SpeedrunVariable[]>> => {\r\n  return await (await fetch(`${getBasePath()}/levels/${level.id}/variables`)).json()\r\n}\r\n\r\nconst fetchUser = async (user: SpeedrunId): Promise<SpeedrunApiResponse<SpeedrunUser>> => {\r\n  return await (await fetch(`${getBasePath()}/users/${user}`)).json()\r\n}\r\n\r\nexport {\r\n  fetchLevelBoard,\r\n  fetchLevelBoardWithVariable,\r\n  fetchLevels,\r\n  fetchLevelCategories,\r\n  fetchLevelVariables,\r\n  fetchUser\r\n}\r\n","import SpeedrunApiResponse from './models/SpeedrunApiResponse'\r\nimport SpeedrunCategory from './models/SpeedrunCategory'\r\nimport SpeedrunLevel from './models/SpeedrunLevel'\r\nimport SpeedrunVariable from './models/SpeedrunVariable'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\nimport { fetchLevelCategories, fetchLevelBoard, fetchLevels, fetchLevelVariables, fetchLevelBoardWithVariable } from './wrapper'\r\nimport { Categories, ChapterNames, COLLECTIBLES_VARIABLE_NAME, FC_RUN_VALUE } from './constants/celeste'\r\n\r\ninterface RawDataCollection {\r\n    categories: SpeedrunApiResponse<SpeedrunCategory[]>,\r\n    levels: SpeedrunApiResponse<SpeedrunLevel[]>,\r\n    grid: SpeedrunApiResponse<SpeedrunLeaderboard>[][],\r\n    variables: SpeedrunApiResponse<SpeedrunVariable[]>[]\r\n}\r\n\r\nconst getRawLeaderboardData = async (): Promise<RawDataCollection> => {\r\n  const levels = await fetchLevels()\r\n  const categories = (await fetchLevelCategories(levels.data[0]))\r\n  const variables = await Promise.all(levels.data.map((lvl) => fetchLevelVariables(lvl)))\r\n  const grid = await Promise.all(categories.data.map((cat) => {\r\n    return Promise.all(levels.data.map((lvl, i) => {\r\n      if (cat.name === Categories.COLLECTIBLES && lvl.name !== ChapterNames.C9) {\r\n        // find the 2 relevant IDs based on variable name and run value label\r\n        const variable = variables[i].data.find((x) => x.name === COLLECTIBLES_VARIABLE_NAME)\r\n        const value = Object.entries(variable!.values.values).find(([_key, val]) => val.label === FC_RUN_VALUE)\r\n\r\n        return fetchLevelBoardWithVariable(lvl, cat, variable!.id, value![0])\r\n      }\r\n      return fetchLevelBoard(lvl, cat)\r\n    }))\r\n  }))\r\n\r\n  return {\r\n    categories,\r\n    levels,\r\n    grid,\r\n    variables\r\n  }\r\n}\r\n\r\nexport { getRawLeaderboardData }\r\n","import LevelGrid from './models/LevelGrid'\r\nimport SpeedrunLeaderboard from './models/SpeedrunLeaderboard'\r\n\r\n/** function that transforms a LevelGrid in some way */\r\ntype gridTransformationFunction = (grid: LevelGrid) => LevelGrid;\r\n\r\n/** returns a gridTransformationFunction, using the given callback function in grid.map */\r\nconst getGridMapTransformation = (func: (levelColumn: SpeedrunLeaderboard[], i: number) => SpeedrunLeaderboard[]): gridTransformationFunction => {\r\n  return (grid: LevelGrid): LevelGrid => {\r\n    return grid.map((levelColumn, i) => func(levelColumn, i))\r\n  }\r\n}\r\n\r\nconst removeColumn = (grid: LevelGrid, col: number): LevelGrid => {\r\n  return grid.filter((_, i) => i !== col)\r\n}\r\n\r\nconst removeFarewellObsoletes = (grid: LevelGrid): LevelGrid => {\r\n  const callback = (levelColumn: SpeedrunLeaderboard[], i: number) => {\r\n    if (i === 0) {\r\n      return levelColumn\r\n    }\r\n    return levelColumn.filter((_, i) => i !== 8)\r\n  }\r\n\r\n  return getGridMapTransformation(callback)(grid)\r\n}\r\n\r\nexport { gridTransformationFunction, getGridMapTransformation, removeColumn, removeFarewellObsoletes }\r\n","import SpeedrunId from '../../speedruncom/models/SpeedrunId'\r\nimport SpeedrunRankedRun from '../../speedruncom/models/SpeedrunRankedRun'\r\nimport RankingGrid from './RankingGrid'\r\nimport { fetchUser } from '../../speedruncom/wrapper'\r\nimport RankedRunWithScore from './RankedRunWithScore'\r\n\r\nexport default class Player {\r\n  id: SpeedrunId\r\n  timesPage: RankingGrid\r\n\r\n  private _pointsPerColumn: number[]\r\n  private _name: string | null | undefined = undefined\r\n\r\n  constructor (id: SpeedrunId, gridDimensions: number[]) {\r\n    this.id = id\r\n    this.timesPage = gridDimensions.map((colSize) => new Array<RankedRunWithScore>(colSize))\r\n    this._pointsPerColumn = gridDimensions.map((_) => 0)\r\n  }\r\n\r\n  /** register run r in the grid at position i, j */\r\n  registerRun (r: SpeedrunRankedRun, s: number, i: number, j: number) {\r\n    const x = {\r\n      place: r.place,\r\n      run: r.run,\r\n      score: s\r\n    }\r\n    this.timesPage[i][j] = x\r\n  }\r\n\r\n  public getPointsOfColumn (col: number): number {\r\n    if (this._pointsPerColumn[col]) {\r\n      return this._pointsPerColumn[col]\r\n    }\r\n\r\n    const val = this.timesPage[col].reduce((sum, r) => sum + r.score, 0)\r\n    this._pointsPerColumn[col] = val\r\n\r\n    return val\r\n  }\r\n\r\n  public get totalPoints () {\r\n    return this._pointsPerColumn.reduce((sum, _, i) => sum + this.getPointsOfColumn(i), 0)\r\n  }\r\n\r\n  /**\r\n   * this getter should be used with caution, preferably when absolutely certain that the name of\r\n   * a player is already loaded\r\n   *\r\n   * otherwise use the async version getName\r\n   */\r\n  public get name () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    fetchUser(this.id).then(val => {\r\n      const n = val.data.names.international\r\n      this._name = n\r\n\r\n      return n\r\n    })\r\n\r\n    return ''\r\n  }\r\n\r\n  public async getName () {\r\n    if (this._name) {\r\n      return this._name\r\n    }\r\n\r\n    try {\r\n      const n = await (await fetchUser(this.id)).data.names.international\r\n      this._name = n\r\n    } catch {\r\n      this._name = `UNLOADED: ${this.id}`\r\n    }\r\n\r\n    return this._name\r\n  }\r\n}\r\n","import SpeedrunRankedRun from '../speedruncom/models/SpeedrunRankedRun'\r\n\r\ntype scoringFunction = (r: SpeedrunRankedRun) => number\r\n\r\nconst eliteScoring = (run: SpeedrunRankedRun): number => {\r\n  if (run.place === 1) { return 100 }\r\n  if (run.place === 2) { return 97 }\r\n  return Math.max(0, 98 - run.place)\r\n}\r\n\r\nconst getPercentScoreFn = (wrTime: number) => {\r\n  return (r: SpeedrunRankedRun) => {\r\n    const t = r.run.times.primary_t\r\n\r\n    return Math.max(0, Math.round((1 - Math.log((Math.E - 1) * (t / wrTime - 1) + 1)) * 1000))\r\n  }\r\n}\r\n\r\nexport { scoringFunction, eliteScoring, getPercentScoreFn }\r\n","import LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport SpeedrunId from '../speedruncom/models/SpeedrunId'\r\nimport Player from './models/Player'\r\nimport { getPercentScoreFn } from './scoring'\r\n\r\nconst buildPlayerMap = async (grid: LevelGrid): Promise<Map<SpeedrunId, Player>> => {\r\n  const pMap = new Map<SpeedrunId, Player>()\r\n  const gridDimensions = grid.map((col) => col.length)\r\n\r\n  grid.forEach((levelColumn, i) =>\r\n    levelColumn.forEach((board, j) => {\r\n      const fn = getPercentScoreFn(board.runs[0].run.times.primary_t)\r\n\r\n      board.runs.forEach((r) => {\r\n        const p = r.run.players[0]\r\n\r\n        // skip players without id (deleted users)\r\n        if (p.id) {\r\n          pMap.has(p.id) || pMap.set(p.id, new Player(p.id, gridDimensions))\r\n          const pl = pMap.get(p.id)!\r\n          pl.registerRun(r, fn(r), i, j)\r\n        }\r\n      })\r\n    })\r\n  )\r\n\r\n  return pMap\r\n}\r\n\r\nexport default buildPlayerMap\r\n","import { getRawLeaderboardData } from '../speedruncom/get-data'\r\nimport { gridTransformationFunction, removeFarewellObsoletes } from '../speedruncom/grid-transformation'\r\nimport LevelGrid from '../speedruncom/models/LevelGrid'\r\nimport buildPlayerMap from './build-map'\r\n\r\nconst getPlayerMap = async () => {\r\n  // fetch data\r\n  const raw = await getRawLeaderboardData()\r\n  let grid: LevelGrid = raw.grid.map((categoryRow) => categoryRow.map((levelBoard) => levelBoard.data))\r\n\r\n  // transform grid\r\n  const transformations: gridTransformationFunction[] = [\r\n    removeFarewellObsoletes\r\n  ]\r\n  transformations.forEach((tFunc) => { grid = tFunc(grid) })\r\n\r\n  // build and return player map\r\n  return await buildPlayerMap(grid)\r\n}\r\n\r\nexport default getPlayerMap\r\n","import Player from '../../../modules/rankings/models/Player'\r\nimport TableSelection from '../../models/TableSelection'\r\n\r\nconst getPointsGetter = (sel: TableSelection) => {\r\n  switch (sel) {\r\n    case TableSelection.TOTAL:\r\n      return (p: Player) => p.totalPoints\r\n\r\n    case TableSelection.A_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(0)\r\n\r\n    case TableSelection.COLLECTIBLES:\r\n      return (p: Player) => p.getPointsOfColumn(1)\r\n\r\n    case TableSelection.B_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(2)\r\n\r\n    case TableSelection.C_SIDES:\r\n      return (p: Player) => p.getPointsOfColumn(3)\r\n\r\n    default:\r\n      return (p: Player) => p.totalPoints\r\n  }\r\n}\r\n\r\nexport default getPointsGetter\r\n","/**\r\n * collection of functions to help transform the player array based on user input\r\n */\r\n\r\nimport Player from '../../../modules/rankings/models/Player'\r\nimport AppState from '../../states/AppState'\r\nimport getPointsGetter from './points-getter'\r\n\r\nconst getSorterFunction = (s: AppState) => {\r\n  const getter = getPointsGetter(s.tableSelection)\r\n  return (a: Player, b: Player) => getter(b) - getter(a)\r\n}\r\n\r\nexport { getSorterFunction }\r\n","import AppEvent from '../../models/AppEvent'\r\nimport AppState from '../../states/AppState'\r\nimport TableSelection from '../../models/TableSelection'\r\n\r\nconst getCallback = (s: AppState, type: TableSelection) => {\r\n  return () => {\r\n    s.tableSelection = type\r\n    document.dispatchEvent(new CustomEvent<AppState>(AppEvent.UPDATE_STATE, { detail: s }))\r\n  }\r\n}\r\n\r\nconst getButton = (s: AppState, type: TableSelection) => {\r\n  const btn = document.createElement('button')\r\n  btn.innerHTML = type\r\n  btn.disabled = (type === s.tableSelection)\r\n  btn.addEventListener('click', getCallback(s, type))\r\n  return btn\r\n}\r\n\r\nconst getControlButtons = (s: AppState) => {\r\n  const l = document.createElement('li')\r\n  l.classList.add('control-buttons')\r\n\r\n  const selections = [\r\n    TableSelection.TOTAL,\r\n    TableSelection.A_SIDES,\r\n    TableSelection.COLLECTIBLES,\r\n    TableSelection.B_SIDES,\r\n    TableSelection.C_SIDES\r\n  ]\r\n\r\n  for (const type of selections) {\r\n    l.appendChild(getButton(s, type))\r\n  }\r\n\r\n  return l\r\n}\r\n\r\nexport default getControlButtons\r\n","const htmlToElement = (html: string): Node => {\r\n  const template = document.createElement('template')\r\n  html = html.trim()\r\n  template.innerHTML = html\r\n  return template.content.firstChild as Node\r\n}\r\n\r\nexport default htmlToElement\r\n","const getMiniText = (content: string) => {\r\n  const x = document.createElement('span')\r\n  x.classList.add('mini-text')\r\n  x.innerHTML = content\r\n  return x\r\n}\r\n\r\nconst getMiniTextString = (content: string) => {\r\n  const x = document.createElement('span')\r\n  x.classList.add('mini-text')\r\n  x.innerHTML = content\r\n  return `<span class=\"mini-text\">${content}</span>`\r\n}\r\n\r\nconst getPts = (asString: boolean = false) => {\r\n  return asString ? getMiniTextString('pts') : getMiniText('pts')\r\n}\r\n\r\nconst getMs = (ms: string, asString: boolean = false) => {\r\n  return asString ? getMiniTextString(ms) : getMiniText(ms)\r\n}\r\n\r\nconst getOrdinal = (n: number, asString: boolean = false) => {\r\n  // taken from https://stackoverflow.com/a/39466341\r\n  const nth = (x: number) => { return ['st', 'nd', 'rd'][((x + 90) % 100 - 10) % 10 - 1] || 'th' }\r\n  const ordinal = nth(n)\r\n\r\n  return asString ? getMiniTextString(ordinal) : getMiniText(ordinal)\r\n}\r\n\r\nexport { getMiniText, getPts, getMs, getOrdinal }\r\n","import Player from '../../../modules/rankings/models/Player'\r\nimport AppState from '../../states/AppState'\r\nimport htmlToElement from '../util/html-helper'\r\nimport getPointsGetter from '../util/points-getter'\r\nimport { getPts } from './subtexts'\r\n\r\nconst getTableElement = (\r\n  place: string | number,\r\n  player: Player,\r\n  points: string | number\r\n) => {\r\n  const ele = htmlToElement(`\r\n    <tr class=\"hover-highlight\">\r\n      <td class=\"bold\">${place}</td>\r\n      <td>${player.name}</td>\r\n      <td>${points} ${getPts(true)}</td>\r\n    </tr>\r\n  `)\r\n\r\n  ele.addEventListener('click', () => {\r\n    window.open(`./player.html?player=${player.id}`, '_blank')!.focus()\r\n  })\r\n\r\n  return ele\r\n}\r\n\r\nconst getTableHeader = (str: string[]) => {\r\n  const x = str.map(e => `<th>${e}</th>`).join('')\r\n  return htmlToElement(`<tr>${x}</tr>`)\r\n}\r\n\r\nconst getLeaderboardTable = (s: AppState, arr: Player[]) => {\r\n  const t = document.createElement('table')\r\n  const getter = getPointsGetter(s.tableSelection)\r\n  t.classList.add('leaderboard-table')\r\n\r\n  const head = getTableHeader(['Place', 'Name', 'Points']) as HTMLElement\r\n  t.appendChild(head)\r\n\r\n  arr.forEach((p, i) => t.appendChild(getTableElement(\r\n    i + 1,\r\n    p,\r\n    getter(p)\r\n  )))\r\n\r\n  return t\r\n}\r\n\r\nexport default getLeaderboardTable\r\n","import AppEvent from '../../models/AppEvent'\r\nimport AppState from '../../states/AppState'\r\n\r\nconst getLoadMoreButton = (s: AppState, max: number) => {\r\n  if (s.tableState >= max) {\r\n    return document.createElement('div')\r\n  }\r\n\r\n  const d = document.createElement('div')\r\n  d.classList.add('center')\r\n\r\n  const btn = document.createElement('button')\r\n  btn.innerHTML = 'Load 50 more ...'\r\n\r\n  btn.addEventListener('click', () => {\r\n    s.tableState = (s.tableState + 50)\r\n    document.dispatchEvent(new CustomEvent<AppState>(AppEvent.UPDATE_STATE, { detail: s }))\r\n  })\r\n\r\n  d.appendChild(btn)\r\n  return d\r\n}\r\n\r\nexport default getLoadMoreButton\r\n","const getLoader = () => {\r\n  const x = document.createElement('div')\r\n  x.classList.add(...['loader', 'center'])\r\n  x.innerHTML = 'Loading ...'\r\n  return x\r\n}\r\n\r\nexport default getLoader\r\n","import AppState from '../../states/AppState'\r\nimport { getSorterFunction } from '../util/array-helper'\r\nimport getControlButtons from './control-buttons'\r\nimport getLeaderboardTable from './leaderboard-table'\r\nimport getLoadMoreButton from './load-more-button'\r\nimport getLoader from './loader'\r\n\r\nconst renderMainPage = async (state: AppState, container: HTMLElement): Promise<void> => {\r\n  const reset = () => { container!.innerHTML = '' }\r\n\r\n  reset()\r\n\r\n  // add loader as arranging array might include loading player names\r\n  container!.appendChild(getLoader())\r\n\r\n  // arrange data based on state\r\n  const arr = Array.from(state.players.values())\r\n    .sort(getSorterFunction(state))\r\n    .slice(0, state.tableState)\r\n\r\n  // load all names\r\n  await Promise.all(arr.map(async (p) => await p.getName()))\r\n\r\n  // remove loader again\r\n  reset()\r\n\r\n  // render dynamic container based on state\r\n  container!.appendChild(getControlButtons(state))\r\n  container!.appendChild(getLeaderboardTable(state, arr))\r\n  container!.appendChild(getLoadMoreButton(state, state.players.size))\r\n}\r\n\r\nexport default renderMainPage\r\n","import AppState from '../states/AppState'\r\nimport AppEvent from '../models/AppEvent'\r\nimport TableSelection from '../models/TableSelection'\r\nimport getPlayerMap from '../../modules/rankings/get-map'\r\nimport renderMainPage from '../ui/components/main-page'\r\nimport getLoader from '../ui/components/loader'\r\n\r\nconst main = async () => {\r\n  const CONTAINER = document.getElementById('dynamic-container')\r\n\r\n  CONTAINER!.appendChild(getLoader())\r\n\r\n  const pMap = await getPlayerMap()\r\n\r\n  const initialState: AppState = {\r\n    players: pMap,\r\n    tableSelection: TableSelection.TOTAL,\r\n    tableState: 100\r\n  }\r\n\r\n  document.addEventListener(AppEvent.UPDATE_STATE, ((e: CustomEvent<AppState>) => {\r\n    renderMainPage(e.detail, CONTAINER!)\r\n  // eslint-disable-next-line no-undef\r\n  }) as EventListener)\r\n\r\n  await renderMainPage(initialState, CONTAINER!)\r\n}\r\n\r\nmain()\r\n"]}